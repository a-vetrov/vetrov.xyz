{"version":3,"sources":["actions/action-types.js","components/Calculator.js","actions/index.js","components/DateSelector.js","App.js","reducers/index.js","store/index.js","index.js"],"names":["CHANGE_CURRENCY","CHANGE_AMOUNT","CHANGE_DATE","DATA_LOADED","ConnectedCalculator","currencyAmountChange","event","_this","props","changeAmount","parseFloat","target","value","currencyTypeChanged","changeCurrency","createSelect","data","options","map","index","react_default","a","createElement","charCode","key","hiddenOptiom","disabled","hidden","currency","onChange","className","getRatio","ratio","filter","length","amountValue","isNaN","this","amount","roubles","type","size","style","width","toFixed","Component","Calculator","connect","state","dispatch","ConnectedDateSelector","onDateChanged","newDate","split","reverse","join","changeDate","getData","componentDidMount","DateSelector","date","url","parseData","result","nodeList","DOMParser","parseFromString","getElementsByTagName","i","node","childNodes","nodeValue","replace","push","fetch","then","response","text","catch","message","console","log","App","maxWidth","components_Calculator","components_DateSelector","initialState","rootReducer","arguments","undefined","action","Object","objectSpread","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.791c091d.chunk.js","sourcesContent":["export const CHANGE_CURRENCY = \"CHANGE_CURRENCY\";\r\nexport const CHANGE_AMOUNT = \"CHANGE_AMOUNT\";\r\nexport const CHANGE_DATE = \"CHANGE_DATE\";\r\nexport const DATA_LOADED = \"DATA_LOADED\";","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport {changeAmount} from '../actions/index' ;\r\nimport {changeCurrency} from '../actions/index' ;\r\n//import './App.css';\r\n\r\nconst mapStateToProps = state => {\r\n    return { amount: state.amount, currency:state.currency, data:state.data, ratio:state.ratio };\r\n};\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        changeAmount: amount => dispatch(changeAmount(amount)),\r\n        changeCurrency: currency => dispatch(changeCurrency(currency))\r\n    };\r\n}\r\n\r\nclass ConnectedCalculator extends Component {\r\n\r\n    currencyAmountChange = (event) => {\r\n        this.props.changeAmount(parseFloat(event.target.value)) ;\r\n    } ;\r\n\r\n    currencyTypeChanged = (event) => {\r\n        this.props.changeCurrency(event.target.value) ;\r\n    } ;\r\n\r\n    render() {\r\n\r\n        const amountValue = isNaN(this.props.amount) ? 0 : this.props.amount ;\r\n        const roubles = amountValue * this.getRatio() ;\r\n\r\n        return (\r\n            <div className=\"form-inline\">\r\n                <input type=\"text\" size=\"10\" onChange={this.currencyAmountChange} value={amountValue}\r\n                       className=\"form-control\" style={{width:\"5em\"}}/>\r\n\r\n                {this.createSelect()}\r\n                &nbsp;\r\n                 = {roubles.toFixed(2)} рублей\r\n            </div>\r\n        );\r\n    }\r\n\r\n    createSelect = () => {\r\n        if (!this.props.data) return null ;\r\n        let options = this.props.data.map((value, index) => <option value={value.charCode} key={index}>{value.charCode}</option>) ;\r\n        let hiddenOptiom = <option value=\"\" disabled hidden>...</option>  ;\r\n        let value = this.props.currency || \"\" ;\r\n        return <select onChange={this.currencyTypeChanged} value={value} className=\"custom-select\">\r\n                    {hiddenOptiom}\r\n                    {options}\r\n                </select> ;\r\n    } ;\r\n\r\n    getRatio = () => {\r\n        if (!this.props.data) return 0 ;\r\n        const ratio = this.props.data.filter((value) => value.charCode === this.props.currency) ;\r\n        return ratio.length ? ratio[0].ratio : 0 ;\r\n    }\r\n}\r\n\r\nconst Calculator = connect(mapStateToProps,mapDispatchToProps)(ConnectedCalculator);\r\nexport default Calculator;\r\n","import { CHANGE_CURRENCY } from \"./action-types\";\r\nimport { CHANGE_AMOUNT } from \"./action-types\";\r\nimport { CHANGE_DATE } from \"./action-types\";\r\nimport { DATA_LOADED } from \"./action-types\";\r\n\r\nexport function changeCurrency(currency) {\r\n    return { type: CHANGE_CURRENCY, currency }\r\n};\r\n\r\nexport function changeAmount(amount) {\r\n    return { type: CHANGE_AMOUNT, amount }\r\n};\r\n\r\nexport function getData(date) {\r\n    //const url = date ? \"http://localhost/proxy.php?date_req=\" + date : \"http://localhost/proxy.php\" ;\r\n    const url = date ? \"./proxy.php?date_req=\" + date : \"./proxy.php\" ;\r\n\r\n    let parseData = (data) => {\r\n        let result = [] ;\r\n        let xmlDoc = (new DOMParser()).parseFromString(data,\"text/xml\");\r\n        let nodeList = xmlDoc.getElementsByTagName(\"Valute\") ;\r\n\r\n       for (let i=0; i< nodeList.length; i++) {\r\n           let node = nodeList[i] ;\r\n           let charCode = node.getElementsByTagName(\"CharCode\")[0].childNodes[0].nodeValue ;\r\n           let ratio = parseFloat(node.getElementsByTagName(\"Value\")[0].childNodes[0].nodeValue.replace(',','.')) ;\r\n           result.push({ratio, charCode}) ;\r\n       }\r\n\r\n        return result ;\r\n    } ;\r\n\r\n    return function(dispatch) {\r\n        return fetch(url)\r\n            .then(response => response.text())\r\n            .then(data => {\r\n                dispatch({ type: DATA_LOADED, data:parseData(data) });\r\n            })\r\n            .catch( message => console.log(message) );\r\n    };\r\n};\r\n\r\nexport function changeDate(date) {\r\n    return {type:CHANGE_DATE, date} ;\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport {changeDate} from \"../actions\";\r\nimport {getData} from \"../actions\";\r\n//import './App.css';\r\n\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        changeDate: date => dispatch(changeDate(date)),\r\n        getData: date => dispatch(getData(date))\r\n    };\r\n}\r\n\r\n\r\nclass ConnectedDateSelector extends Component {\r\n\r\n    onDateChanged = (event) => {\r\n        let newDate = event.target.value ;\r\n        newDate = newDate.split(\"-\").reverse().join('/') ;\r\n        this.props.changeDate(newDate) ;\r\n        this.props.getData(newDate)\r\n    } ;\r\n\r\n    componentDidMount = () => this.props.getData(null) ;\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"form-inline\">\r\n                <span className=\"card-text\">Дата : &nbsp;</span>\r\n                <input type=\"date\" onChange={this.onDateChanged} className=\"form-control\" style={{width:\"10em\"}}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst DateSelector = connect(null, mapDispatchToProps)(ConnectedDateSelector);\r\nexport default DateSelector;\r\n","import React, { Component } from 'react';\r\nimport Calculator from './components/Calculator';\r\nimport DateSelector from './components/DateSelector';\r\nimport \"./App.css\" ;\r\n\r\nclass App extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"card mx-auto App\" style={{maxWidth:\"500px\"}}>\r\n                <h5 className=\"card-header\">Валютный калькулятор</h5>\r\n                <div className=\"card-body\">\r\n                    <Calculator/>\r\n                    <br/>\r\n                    <DateSelector/>\r\n                    <br/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import { CHANGE_CURRENCY } from \"../actions/action-types\";\r\nimport { CHANGE_AMOUNT } from \"../actions/action-types\";\r\nimport { CHANGE_DATE } from \"../actions/action-types\";\r\nimport { DATA_LOADED } from \"../actions/action-types\";\r\n\r\nconst initialState = {\r\n    currency:null,\r\n    amount:1,\r\n    date:null,\r\n    data:null\r\n};\r\n\r\nfunction rootReducer(state = initialState, action) {\r\n\r\n    switch (action.type) {\r\n        case CHANGE_CURRENCY : return { ...state, currency: action.currency } ;\r\n        case CHANGE_AMOUNT : return { ...state, amount: action.amount } ;\r\n        case CHANGE_DATE : return { ...state, date: action.date } ;\r\n        case DATA_LOADED : return { ...state, data: action.data } ;\r\n        default : return state;\r\n    }\r\n\r\n};\r\n\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware  } from \"redux\";\r\nimport rootReducer from \"../reducers/index\";\r\nimport thunk from 'redux-thunk';\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from \"react-redux\";\nimport store from \"./store/index\";\n\n\n\nReactDOM.render(<Provider store={store}>\n                    <App />\n                </Provider>,\n                document.getElementById('root'));\n\n"],"sourceRoot":""}